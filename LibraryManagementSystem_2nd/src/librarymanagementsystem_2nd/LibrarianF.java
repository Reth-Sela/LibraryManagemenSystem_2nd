


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;



public final class LibrarianF extends javax.swing.JFrame {

    String sex;
    String fileName = null;
    byte[] person_img = null;
    
    
    
        public ArrayList<Librarian> librarianList() {
        ArrayList<Librarian> librarianList = new ArrayList<> ();
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
        try{
            
            try (Connection connection = DriverManager.getConnection(url)) {
            
            String query1 = "SELECT LibrarianID, FirstName, LastName, Sex, Street, HouseNo, City , BirthDate, PhoneNumber, Salary, HiredDate, Image FROM testTb";
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(query1);
            
 
            while (rs.next()) {
                int id = rs.getInt("LibrarianID");
                String firstName = rs.getString("FirstName");
                String lastName = rs.getString("LastName");
                String sex = rs.getString("Sex");
                String houseNo = rs.getString("HouseNo");
                String streetNo = rs.getString("Street");
                String city = rs.getString("City");
                String birthDate = rs.getString("BirthDate");
                String phoneNumber = rs.getString("PhoneNumber");
                String salary = rs.getString("Salary");
                String hiredDate = rs.getString("HiredDate");
                byte[] image = rs.getBytes("Image");
                
                Librarian librarian = new Librarian(id, firstName, lastName, sex, houseNo, streetNo, city, birthDate, phoneNumber, salary, hiredDate, image);
                   librarianList.add(librarian);
            }
            
            }
        }catch(SQLException e) {
            System.out.println("An error occured while connecting to the database.");
            e.printStackTrace();
        }
        
        return librarianList;
    }
    
    public void show_Librarian(JList<String> displayList) {
        ArrayList<Librarian> list = librarianList();
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (Librarian librarian : list) {
            String fullName = librarian.getFName() + " " + librarian.getLName();
            listModel.addElement(fullName);
        }
        displayList.setModel(listModel);
    }
    
    

    private void updateTextFields(String selectedName) {
            ArrayList<Librarian> list = librarianList();
            for (Librarian librarian : list) {
                String fullName = librarian.getFName() + " " + librarian.getLName();
                if (fullName.equals(selectedName)) {
                    firstName.setText(librarian.getFName());
                    lastName.setText(librarian.getLName());
                    break;
                }
            }
        }
    

    
    
    public LibrarianF() {
        
        initComponents();
        show_Librarian(displayList);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        dateChooser1 = new com.raven.datechooser.DateChooser();
        dateChooser2 = new com.raven.datechooser.DateChooser();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayList = new javax.swing.JList<>();
        searchInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        firstName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lastName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        houseNo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        street = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        birthDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        phoneNumber = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        salary = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        hiredDate = new javax.swing.JTextField();
        updateBtn = new javax.swing.JButton();
        insertBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        city = new javax.swing.JTextField();
        lblImg = new javax.swing.JLabel();
        chooseImgBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();

        dateChooser1.setDateFormat("yyyy-MMMM-dd");
        dateChooser1.setTextRefernce(birthDate);

        dateChooser2.setDateFormat("yyyy-MMMM-dd");
        dateChooser2.setTextRefernce(hiredDate);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Librarian's Information");

        displayList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        displayList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(displayList);
        displayList.getAccessibleContext().setAccessibleDescription("");

        searchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInputActionPerformed(evt);
            }
        });
        searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchInputKeyReleased(evt);
            }
        });

        jLabel3.setText("First Name");

        jLabel4.setText("Last Name");

        jLabel5.setText("Sex");

        jLabel6.setText("House No");

        houseNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseNoActionPerformed(evt);
            }
        });

        jLabel7.setText("Street No");

        jLabel9.setText("Birth Date");

        jLabel10.setText("Province/City");

        jLabel11.setText("Phone Number");

        jLabel12.setText("Salary");

        jLabel14.setText("Hired Date");

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        insertBtn.setText("Insert");
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        newBtn.setText("New");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(male);
        male.setText("Male");

        buttonGroup1.add(female);
        female.setText("Female");

        lblImg.setBackground(new java.awt.Color(102, 102, 102));

        chooseImgBtn.setText("Choose an image file");
        chooseImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImgBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Search(by name)");

        deleteBtn.setForeground(new java.awt.Color(255, 51, 0));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(insertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchInput)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel14)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel9)))
                            .addComponent(jLabel4))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(male)
                                        .addGap(46, 46, 46)
                                        .addComponent(female))
                                    .addComponent(birthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(houseNo, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hiredDate, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chooseImgBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(chooseImgBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3))
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(male)
                                .addComponent(female)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(birthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(houseNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(hiredDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(insertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchInputActionPerformed

    private void houseNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_houseNoActionPerformed

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        
        
        
        //            try (Connection connection = DriverManager.getConnection(url)) {
//                
//                String query = "insert into testTb(FirstName, LastName, Sex, BirthDate, HouseNo, StreetNo, City, PhoneNumber, Salary, HiredDate)values(?,?,?,?,?,?,?,?,?,?)";
//                PreparedStatement pst = connection.prepareStatement(query);
//                pst.setString(1, firstName.getText());
//                pst.setString(2, lastName.getText());
//                if (male.isSelected()) {
//                    sex="Male";
//                }
//                if (female.isSelected()) {
//                    sex="Female";
//                }
//                pst.setString(3, sex);
//                pst.setString(4, birthDate.getText());
//                pst.setString(5, houseNo.getText());
//                pst.setString(6, street.getText());
//                pst.setString(7, city.getText());
//                pst.setString(8, phoneNumber.getText());
//                pst.setString(9, salary.getText());
//                pst.setString(10, hiredDate.getText());
//                
//
//                pst.executeUpdate();
//                JOptionPane.showMessageDialog(null, "Inserted Successfully.");
//            }
        
        
        
        
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
        try(Connection connection = DriverManager.getConnection(url)) {
            // Check if the record already exists
            String checkQuery = "SELECT COUNT(*) FROM testTb WHERE FirstName = ? AND LastName = ? AND BirthDate = ?";
            try (PreparedStatement checkPst = connection.prepareStatement(checkQuery)) {
                checkPst.setString(1, firstName.getText());
                checkPst.setString(2, lastName.getText());
                checkPst.setString(3, birthDate.getText());
                ResultSet rs = checkPst.executeQuery();
                rs.next();
                int count = rs.getInt(1);
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "Record already exists.");
                } else {
                    // If the record does not exist, insert the new record
                    String insertQuery = "INSERT INTO testTb(FirstName, LastName, Sex, BirthDate, HouseNo, Street, City, PhoneNumber, Salary, HiredDate, Image ) VALUES(?,?,?,?,?,?,?,?,?,?, ?)";
                    try (PreparedStatement pst = connection.prepareStatement(insertQuery)) {
                        pst.setString(1, firstName.getText());
                        pst.setString(2, lastName.getText());
                        if (male.isSelected()) {
                            sex = "Male";
                        } else if (female.isSelected()) {
                            sex = "Female";
                        }
                        pst.setString(3, sex);
                        pst.setString(4, birthDate.getText());
                        pst.setString(5, houseNo.getText());
                        pst.setString(6, street.getText());
                        pst.setString(7, city.getText());
                        pst.setString(8, phoneNumber.getText());
                        pst.setString(9, salary.getText());
                        pst.setString(10, hiredDate.getText());
                        pst.setBytes(11, person_img);

                        pst.executeUpdate();
                        show_Librarian(displayList);
                        JOptionPane.showMessageDialog(null, "Inserted Successfully.");
                    }
                }
            }


        }catch(SQLException e) {
            JOptionPane.showMessageDialog(null, "Nope.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_insertBtnActionPerformed

    private void chooseImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImgBtnActionPerformed
        
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        fileName = f.getAbsolutePath();
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(fileName).getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
        lblImg.setIcon(imageIcon);
        try {
            File image = new File(fileName);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);
                
            }
            person_img = bos.toByteArray();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_chooseImgBtnActionPerformed

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        firstName.setText("");
        lastName.setText("");
        buttonGroup1.clearSelection();
        houseNo.setText("");
        street.setText("");
        city.setText("");
        phoneNumber.setText("");
        birthDate.setText("");
        salary.setText("");
        hiredDate.setText("");
        lblImg.setIcon(null);
    }//GEN-LAST:event_newBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
       
       
        
        
        
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
        String tmp = displayList.getSelectedValue();

        if (tmp == null || !tmp.contains(" ")) {
            JOptionPane.showMessageDialog(null, "Invalid selection.");
            return;
        }

        String[] nameParts = tmp.split(" ");
        if (nameParts.length != 2) {
            JOptionPane.showMessageDialog(null, "Invalid selection format.");
            return;
        }

        String firstNameSelected = nameParts[0];
        String lastNameSelected = nameParts[1];

        // Get updated values from the UI
        String fName = firstName.getText();
        String lName = lastName.getText();
        String sex = male.isSelected() ? "Male" : "Female";
        String addHouse = houseNo.getText();
        String addStreet = street.getText();
        String addCity = city.getText();
        String addBirthDate = birthDate.getText();
        String addPhone = phoneNumber.getText();
        String addSalary = salary.getText();
        String addHiredDate = hiredDate.getText();

        // Convert ImageIcon back to byte array if lblImg has an image
        byte[] imageBytes = null;
        Icon icon = lblImg.getIcon();
        if (icon != null) {
            try {
                Image image = ((ImageIcon) icon).getImage();
                BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
                Graphics2D bGr = bufferedImage.createGraphics();
                bGr.drawImage(image, 0, 0, null);
                bGr.dispose();
                
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bufferedImage, "jpg", baos);
                baos.flush();
                imageBytes = baos.toByteArray();
                baos.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to convert image.");
                e.printStackTrace();
                return;
            }
        }

        try (Connection connection = DriverManager.getConnection(url)) {
            String query = "UPDATE testTb SET FirstName=?, LastName=?, Sex=?, HouseNo=?, Street=?, City=?, BirthDate=?, PhoneNumber=?, Salary=?, HiredDate=?, Image=? WHERE FirstName=? AND LastName=?";
            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setString(1, fName);
                pst.setString(2, lName);
                pst.setString(3, sex);
                pst.setString(4, addHouse);
                pst.setString(5, addStreet);
                pst.setString(6, addCity);
                pst.setString(7, addBirthDate);
                pst.setString(8, addPhone);
                pst.setString(9, addSalary);
                pst.setString(10, addHiredDate);
                if (imageBytes != null) {
                    pst.setBytes(11, imageBytes);
                } else {
                    pst.setNull(11, java.sql.Types.BLOB);
                }
                pst.setString(12, firstNameSelected);
                pst.setString(13, lastNameSelected);

                int rowsAffected = pst.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Updated Successfully.");
                    // Optionally refresh the displayList or other UI components here
                } else {
                    JOptionPane.showMessageDialog(null, "Record not found or no changes made.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database connection failed.");
            e.printStackTrace();
        }
        
        
        show_Librarian(displayList);
        
        
       
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
    String tmp = displayList.getSelectedValue();
    if (tmp == null) {
        JOptionPane.showMessageDialog(null, "Please select a record to delete.");
        return;
    }

    // Split tmp into firstName and lastName
    String[] parts = tmp.split(" ");
    if (parts.length != 2) {
        JOptionPane.showMessageDialog(null, "Invalid selection format.");
        return;
    }

    String FirstName = parts[0];
    String LastName = parts[1];

    int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

    if (confirmation == JOptionPane.YES_OPTION) {
        try (Connection connection = DriverManager.getConnection(url)) {
            String query = "DELETE FROM testTb WHERE FirstName = ? AND LastName = ?";
            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setString(1, FirstName);
                pst.setString(2, LastName);

                int rowsAffected = pst.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Deleted Successfully.");
                    show_Librarian(displayList); // Refresh the list
                } else {
                    JOptionPane.showMessageDialog(null, "Record not found.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "An error occurred.");
            e.printStackTrace();
        }
    } else {
//        JOptionPane.showMessageDialog(null, "Deletion cancelled.");
    }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void displayListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayListMouseClicked
            

        
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
        String tmp = displayList.getSelectedValue();

        if (tmp == null || !tmp.contains(" ")) {
            JOptionPane.showMessageDialog(null, "Invalid selection.");
            return;
        }

        String[] nameParts = tmp.split(" ");
        if (nameParts.length != 2) {
            JOptionPane.showMessageDialog(null, "Invalid selection format.");
            return;
        }

        String firstNameSelected = nameParts[0];
        String lastNameSelected = nameParts[1];

        try (Connection connection = DriverManager.getConnection(url)) {
            String query = "SELECT * FROM testTb WHERE FirstName=? AND LastName=?";
            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setString(1, firstNameSelected);
                pst.setString(2, lastNameSelected);
                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        String fName = rs.getString("FirstName");
                        firstName.setText(fName);
                        String lName = rs.getString("LastName");
                        lastName.setText(lName);
                        String sexT = rs.getString("Sex").trim();
                        if (sexT.equals("Male")) {
                            male.setSelected(true);
                        } else {
                            female.setSelected(true);
                        }
                        String addHouse = rs.getString("HouseNo");
                        houseNo.setText(addHouse);
                        String addStreet = rs.getString("Street");
                        street.setText(addStreet);
                        String addCity = rs.getString("City");
                        city.setText(addCity);
                        String addBirthDate = rs.getString("BirthDate");
                        birthDate.setText(addBirthDate);
                        String addPhone = rs.getString("PhoneNumber");
                        phoneNumber.setText(addPhone);
                        String addSalary = rs.getString("Salary");
                        double salaryValue = Double.parseDouble(addSalary);
                        String formattedSalary = String.format("%.2f", salaryValue);
                        salary.setText(formattedSalary);
                        String addHiredDate = rs.getString("HiredDate");
                        hiredDate.setText(addHiredDate);
                        byte[] addImg = rs.getBytes("Image");

                        if (addImg != null && addImg.length > 0) {
                            ImageIcon imageIcon = new ImageIcon(addImg);
                            Image image = imageIcon.getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH);
                            lblImg.setIcon(new ImageIcon(image));
                        } else {
                            lblImg.setIcon(null); // Clear the label if no image is found
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No record found.");
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database connection failed.");
            e.printStackTrace();
        }



    }//GEN-LAST:event_displayListMouseClicked

    private void searchInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchInputKeyReleased
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
        String searchText = searchInput.getText();
        String wildcardSearchText = "%" + searchText + "%";

    try (Connection connection = DriverManager.getConnection(url)) {
        String sql = "SELECT * FROM testTb WHERE FirstName LIKE ? OR LastName LIKE ?";
        PreparedStatement pst = connection.prepareStatement(sql);
        pst.setString(1, wildcardSearchText);
        pst.setString(2, wildcardSearchText);
        ResultSet rs = pst.executeQuery();

        DefaultListModel<String> listModel = new DefaultListModel<>(); // Create a new DefaultListModel
        while (rs.next()) {
            String setFName = rs.getString("FirstName");
            String setLName = rs.getString("LastName");
            String fullName = setFName + " " + setLName;
            listModel.addElement(fullName);
        }
        displayList.setModel(listModel); // Update the JList with the new model
    } catch (SQLException e) {
        e.printStackTrace();
    }



    }//GEN-LAST:event_searchInputKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        String url = "jdbc:sqlserver://SOTHEARITH;user=nani;password=50th34rith;Database=LibDB;encrypt=true;trustServerCertificate=true";
        try{
            
            try (Connection connection = DriverManager.getConnection(url)) {
            
            System.out.println("Connection established.");
            }
        }catch(SQLException e) {
            System.out.println("An error occured while connecting to the database.");
            e.printStackTrace();
        }
        
        
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibrarianF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibrarianF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibrarianF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibrarianF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LibrarianF().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField birthDate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton chooseImgBtn;
    private javax.swing.JTextField city;
    private com.raven.datechooser.DateChooser dateChooser1;
    private com.raven.datechooser.DateChooser dateChooser2;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JList<String> displayList;
    private javax.swing.JRadioButton female;
    private javax.swing.JTextField firstName;
    private javax.swing.JTextField hiredDate;
    private javax.swing.JTextField houseNo;
    private javax.swing.JButton insertBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastName;
    private javax.swing.JLabel lblImg;
    private javax.swing.JRadioButton male;
    private javax.swing.JButton newBtn;
    private javax.swing.JTextField phoneNumber;
    private javax.swing.JTextField salary;
    private javax.swing.JTextField searchInput;
    private javax.swing.JTextField street;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
